services:
  api:
    container_name: api_client
    build: .
    entrypoint: sh ./endpoints/entrypoint.sh
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  bot:
    container_name: bot-client
    build: .
    command: sh -c "python3 -m bot.client"
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      - api
    restart: unless-stopped

  postgres:
    container_name: db
    image: postgres:latest
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U$$POSTGRES_USER -d$$POSTGRES_DB" ]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  pgadmin:
    container_name: pg
    image: dpage/pgadmin4
    env_file:
      - .env
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - 8080:80
    depends_on:
      - postgres
    restart: unless-stopped

  redis:
    container_name: redis
    image: redis:latest
    env_file:
      - .env
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli", "--raw", "incr", "ping" ]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: unless-stopped


volumes:
  postgres_data:
  postgres_test_data:
  pgadmin_data:
  redis_data:

